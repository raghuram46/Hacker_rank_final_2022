public static int getMostVisited2(int max, List<Integer> sprints) {
		Map<Integer, Integer> map = new HashMap<Integer, Integer>();
		for (int i = 1; i < max + 1; i++) {
			map.putIfAbsent(i, 0);
		}

		for (int i = 0; i < sprints.size() - 1; i++) {

			int a = sprints.get(i);// sprints[i];
			int b = sprints.get(i + 1); // sprints[i + 1];
			if (a < b) {
				for (int j = a; j <= b; j++) {
					map.put(j, map.get(j) + 1);
				}
			} else {
				for (int j = b; j <= a; j++) {
					map.put(j, map.get(j) + 1);
				}
			}

		}
		int output = 0;
		int maxVisits = 0;

		for (Map.Entry<Integer, Integer> entry : map.entrySet()) {

			int key = entry.getKey();
			int value = entry.getValue();
			if (maxVisits < value) {
				output = key;
				maxVisits = value;

			} else if (maxVisits == value && output > key) {
				output = key;
			}

		}
		return output;
	}


-----------------------------------------OR------------------------------------------------


public class SprintTraining {
	
	   public static int getMostVisited(int max, List<Integer> sprints) {
		   int[] increment = new int[max+1];
		   for(int i=0;i<sprints.size()-1;i++) {
			   int start = sprints.get(i);
			   int end  = sprints.get(i+1);
			   increment[start]++;
			   increment[end]++;
		   }
		   int temp = 1;
		   Map<Integer, Integer> map = new HashMap<>();
		   for(int j=1;j<max+1;j++) {
			   if(increment[j]>=temp) {
				   temp = increment[j];
				   if(!map.isEmpty()) {
					   List<Integer> values = map.values().stream().collect(Collectors.toList());
					   List<Integer> keys = map.keySet().stream().collect(Collectors.toList());
					   if(temp == keys.get(0) && j<values.get(0) || temp > keys.get(0)) {
						   map.clear();
						   map.put(increment[j],j); 
					   }
				   }else {
					   map.put(increment[j],j);   
				   }
				  
			   }
		   }
		   
		   List<Integer> result = map.values().stream().collect(Collectors.toList());
		   return result.get(0);            

		    }
	
	 public static void main(String[] args) throws NumberFormatException, IOException {
		 BufferedReader data = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(data.readLine());
			int m = Integer.parseInt(data.readLine());
			List<Integer> sprints = new ArrayList<Integer>();
			for(int index=0;index<m;index++){
				sprints.add(Integer.parseInt(data.readLine()));
			}

	        System.out.println(getMostVisited(n, sprints));
              
	    }

}
