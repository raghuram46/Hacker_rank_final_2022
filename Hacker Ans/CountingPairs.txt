class Result {
	public static int countPairs(List<Integer> numbers, int k) {
		int kDiffs = 0;
		Map<Integer, Integer> counter = new HashMap<>();
		for (int n: numbers){
		int countOfN = counter.getOrDefault(n, 0);
		countOfN++;
		counter.put(n, countOfN);
		if(k==0){
		if(countOfN == 2){
		kDiffs++;
		}
		} else if(countOfN ==1){
		if(counter.containsKey(n-k)){
		kDiffs++;
		}
		if(counter.containsKey(n+k)){
		kDiffs++;
		}
		}
		}
		return kDiffs;
	}
}

------------------------------------OR-------------------------------------

	public static int countPairs(List<Integer> numbers, int k) {

		int count = 0;
		Set<Integer> set = new HashSet<Integer>();

		for (Integer num : numbers) {
			set.add(num);
		}

		for (Integer num : set) {
			if (set.contains(num + k)) {
				count++;
			}
		}

		return count;
}